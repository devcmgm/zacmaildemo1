{"ast":null,"code":"var _jsxFileName = \"/home/zaclewis/react1/zacmaildemo1/src/components/Inbox.js\";\nimport React, { Component } from \"react\";\nimport { InboxHtml } from \"./templates/InboxHtml\";\nimport ModalCompose from \"./ModalCompose\";\nimport ModalMessage from \"./ModalMessage\";\nimport messages from \"../data/messages.json\";\nexport class Inbox extends Component {\n  constructor(props) {\n    super(props);\n    this.markRead = this.markRead.bind(this);\n    this.doShow = this.doShow.bind(this);\n    this.doDelete = this.doDelete.bind(this);\n    this.toggleMark = this.toggleMark.bind(this);\n    this.toggleMarkAll = this.toggleMarkAll.bind(this);\n    this.deleteMarked = this.deleteMarked.bind(this);\n    this.refreshMessages = this.refreshMessages.bind(this);\n    this.deleteMessages = this.deleteMessages.bind(this);\n    this.ModalMessage = React.createRef();\n    this.ModalCompose = React.createRef();\n    this.state = {\n      initMessages: messages,\n      messages: messages,\n      selected: {},\n      deleted: []\n    };\n  }\n\n  markRead(idx) {\n    /* mark this message as read */\n    let messages = [...this.state.messages];\n    messages[idx].read = true;\n    this.setState({\n      messages\n    });\n  }\n\n  doShow(idx) {\n    this.markRead(idx);\n    this.setState({\n      selected: messages[idx]\n    });\n    /* open message in modal */\n\n    this.ModalMessage.current.show();\n  }\n\n  doCompose() {\n    /* open compose modal */\n    this.ModalCompose.current.show();\n  }\n\n  toggleMark(idx) {\n    let messages = [...this.state.messages];\n    messages[idx].marked = messages[idx].marked ? 0 : 1;\n    this.setState({\n      messages\n    });\n  }\n\n  doDelete(idx) {\n    let messages = [...this.state.messages];\n    let deleted = [...this.state.deleted];\n    /* append it to deleted */\n\n    deleted.push(messages[idx]);\n    /* remove the message at idx */\n\n    messages.splice(idx, 1);\n    this.setState({\n      messages,\n      deleted\n    });\n  }\n\n  toggleMarkAll() {\n    let messages = [...this.state.messages];\n    messages.map((v, k) => {\n      return v.marked = v.marked ? 0 : 1;\n    });\n    this.setState({\n      messages\n    });\n  }\n\n  deleteMarked() {\n    var self = this;\n    let messages = [...this.state.messages];\n    var tbd = [];\n\n    for (var k = 0; k < messages.length; k++) {\n      if (messages[k].marked === 1) {\n        tbd.push(k);\n      }\n    }\n\n    if (tbd.length > 0) {\n      self.deleteMessages(tbd);\n    }\n  }\n\n  refreshMessages() {\n    let initMessages = [...this.state.initMessages];\n    this.setState({\n      messages: initMessages\n    });\n  }\n\n  deleteMessages(arr) {\n    let messages = [...this.state.messages];\n    let deleted = [...this.state.deleted];\n\n    for (var i = arr.length - 1; i >= 0; i--) {\n      deleted.push(messages[i]);\n      messages.splice(arr[i], 1);\n    }\n\n    this.setState({\n      messages,\n      deleted\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(InboxHtml, {\n      parent: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), React.createElement(ModalCompose, {\n      sendTo: this.state.selected.fromAddress,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }), React.createElement(ModalMessage, {\n      ref: this.ModalMessage,\n      message: this.state.selected,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }));\n  }\n\n}\nexport default Inbox;","map":{"version":3,"sources":["/home/zaclewis/react1/zacmaildemo1/src/components/Inbox.js"],"names":["React","Component","InboxHtml","ModalCompose","ModalMessage","messages","Inbox","constructor","props","markRead","bind","doShow","doDelete","toggleMark","toggleMarkAll","deleteMarked","refreshMessages","deleteMessages","createRef","state","initMessages","selected","deleted","idx","read","setState","current","show","doCompose","marked","push","splice","map","v","k","self","tbd","length","arr","i","render","fromAddress"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { InboxHtml } from \"./templates/InboxHtml\";\nimport ModalCompose from \"./ModalCompose\";\nimport ModalMessage from \"./ModalMessage\";\nimport messages from \"../data/messages.json\";\n\nexport class Inbox extends Component {\n  constructor(props) {\n    super(props);\n    this.markRead = this.markRead.bind(this);\n    this.doShow = this.doShow.bind(this);\n    this.doDelete = this.doDelete.bind(this);\n    this.toggleMark = this.toggleMark.bind(this);\n    this.toggleMarkAll = this.toggleMarkAll.bind(this);\n    this.deleteMarked = this.deleteMarked.bind(this);\n    this.refreshMessages = this.refreshMessages.bind(this);\n    this.deleteMessages = this.deleteMessages.bind(this);\n    this.ModalMessage = React.createRef();\n    this.ModalCompose = React.createRef();\n    this.state = {\n      initMessages: messages,\n      messages: messages,\n      selected: {},\n      deleted: []\n    };\n  }\n\n  markRead(idx) {\n    /* mark this message as read */\n    let messages = [...this.state.messages];\n    messages[idx].read = true;\n    this.setState({ messages });\n  }\n\n  doShow(idx) {\n    this.markRead(idx);\n    this.setState({\n      selected: messages[idx]\n    });\n    /* open message in modal */\n    this.ModalMessage.current.show();\n  }\n\n  doCompose() {\n    /* open compose modal */\n    this.ModalCompose.current.show();\n  }\n\n  toggleMark(idx) {\n    let messages = [...this.state.messages];\n    messages[idx].marked = messages[idx].marked ? 0 : 1;\n    this.setState({ messages });\n  }\n\n  doDelete(idx) {\n    let messages = [...this.state.messages];\n    let deleted = [...this.state.deleted];\n    /* append it to deleted */\n    deleted.push(messages[idx]);\n    /* remove the message at idx */\n    messages.splice(idx, 1);\n    this.setState({ messages, deleted });\n  }\n\n  toggleMarkAll() {\n    let messages = [...this.state.messages];\n    messages.map((v, k) => {\n      return (v.marked = v.marked ? 0 : 1);\n    });\n    this.setState({ messages });\n  }\n\n  deleteMarked() {\n    var self = this;\n    let messages = [...this.state.messages];\n    var tbd = [];\n    for (var k = 0; k < messages.length; k++) {\n      if (messages[k].marked === 1) {\n        tbd.push(k);\n      }\n    }\n\n    if (tbd.length > 0) {\n      self.deleteMessages(tbd);\n    }\n  }\n\n  refreshMessages() {\n    let initMessages = [...this.state.initMessages];\n    this.setState({ messages: initMessages });\n  }\n\n  deleteMessages(arr) {\n    let messages = [...this.state.messages];\n    let deleted = [...this.state.deleted];\n    for (var i = arr.length - 1; i >= 0; i--) {\n      deleted.push(messages[i]);\n      messages.splice(arr[i], 1);\n    }\n    this.setState({ messages, deleted });\n  }\n\n  render() {\n    return (\n      <div>\n        <InboxHtml parent={this} />\n        <ModalCompose sendTo={this.state.selected.fromAddress} />\n        <ModalMessage ref={this.ModalMessage} message={this.state.selected} />\n      </div>\n    );\n  }\n}\n\nexport default Inbox;\n"]},"metadata":{},"sourceType":"module"}